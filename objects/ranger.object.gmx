<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>ranger_stand_spr</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-11</depth>
  <persistent>0</persistent>
  <parentName>player_par</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = id;

hp = 100;
maxHp = 100;
//Til bevægelse
//Til hop
maxJumps = 2 //Max mængde af hop
jumps = 2; //mængden af hop
canJump = true; //Til hop
//Til general bevægelse
canMove = true; //Checker om spilleren kan bevæge sig
acceleration = 1; //placeholder
groundacc = 1; //acceleration på jorden
airacc = 0.8 //accleleration i luften
deacceleration = 0.75; //bruges ikke mate haha kek lmao trololo
maxhspeed = 4; //maimale horisontale fart
airborne = true; //er i luften

//Snare, stun and debuff effects
snared = false;
stunned = false;
marked = false;
captor = noone;


//til slag
canhit = true;
ishitting = false;
hit_dir = "left";
hitpower = 3;
hitpower_lim = 20;

//Til arrow
canShoot = true;
canUseAB1 = true;
charge = 3;
isCharging = false;
shotDirection = "right";
aimVertical = 0;
aimHorizontal = x;
lastCharge = 3;

//Rage gør, at man ikke "flyver", når man bliver ramt
rage = false;

//Abilities
canCast = true;
canUltimate = true;

//Set trap
canTrap = true;
maxTraps = 2;
traps = maxTraps;
//Jump shot
canjumpShot = true;

//Set controls
if(player1_obj.chosenCharacter == "ranger")
{
    keyboard_set_map(vk_control, ord("M"));
    Right = "D";
    Left = "A";
    Up = "W";
    Down = "S";
    A1 = "H";
    A2 = "J";
    A3 = "K";
    A4 = "Y";
    Control = "M";
}

if(player2_obj.chosenCharacter == "ranger")
{
    keyboard_set_map(vk_right, ord("U"));
    keyboard_set_map(vk_left, ord("I"));
    keyboard_set_map(vk_up, ord("O"));
    keyboard_set_map(vk_down, ord("N"));
    keyboard_set_map(vk_numpad4, ord("P"));
    keyboard_set_map(vk_numpad5, ord("B"));
    keyboard_set_map(vk_numpad6, ord("T"));
    keyboard_set_map(vk_numpad7, ord("L"));
    keyboard_set_map(vk_control, ord("M"));
    Right = "U";
    Left = "I";
    Up = "O";
    Down = "N"
    A1 = "P";
    A2 = "B";
    A3 = "T";
    A4 = "L";
    Control = "M"
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canUltimate = true
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Jumpshot arrow timer left</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = id;
with instance_create(x,y,arrow_obj)
{
    owner = ID;
    direction = 225;
    speed = 10;
}
with instance_create(x,y,arrow_obj)
{
    owner = ID;
    direction = 235;
    speed = 10;
}
with instance_create(x,y,arrow_obj)
{
    owner = ID;
    direction = 215;
    speed = 10;
}
alarm[3] = 120;
canMove = true;
canjumpShot = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Jumpshot arrow timer right</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = id;
with instance_create(x,y,arrow_obj)
{
    owner = ID;
    direction = 305;
    speed = 10;
}
with instance_create(x,y,arrow_obj)
{
    owner = ID;
    direction = 315;
    speed = 10;
}
with instance_create(x,y,arrow_obj)
{
    owner = ID;
    direction = 325;
    speed = 10;
}
alarm[3] = 120;
canMove = true;
canjumpShot = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Jumpshot cooldown</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canjumpShot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canTrap = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Can shoot arrow</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>new trap</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if traps &lt; maxTraps
{
    traps +=1;
    alarm[0] = 180
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bevægelse</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Horisontal styring. Trykkes der på en piletast, skal der acceleres med variablen "acceleration", indtil den når maxhspeed
if keyboard_check(ord(Right)) &amp;&amp; place_free(x+hspeed, y) and canMove = true{
  hspeed = min(hspeed+acceleration, maxhspeed);
  image_xscale = 1;
}

if keyboard_check(ord(Left))  &amp;&amp; place_free(x-hspeed, y)and canMove = true{
  hspeed = max(hspeed-acceleration, -maxhspeed);
  image_xscale = -1;
}

//Stop med at gå til højre/venstre, hvis du møder en væg
//Højre
if !place_free(x+hspeed,y) and hspeed&gt;0{ 
  hspeed = 0;
  jumps = maxJumps;
  canJump = false;
  airborne = false;
}

//Venstre
if !place_free(x-abs(hspeed),y) and hspeed&lt;0{
  hspeed = 0;
  jumps = maxJumps;
  airborne = false;
}

//hvis man er i luften, skal airborne være true
if vspeed &gt; 0 or vspeed &lt; 0 and place_free(x+1,y) and place_free(x-1,y){
  airborne = true;
}
if !place_free(x+10,y) or !place_free(x-10,y) or !place_free(x,y+1) or !place_free(x,y-1){
  airborne = false;
}

//acceleration og deacceleration. Er airborne true, skal accelerationen være mindre. 
if airborne = true{
  acceleration = airacc;
  sliding = false;
  slidingRight = false;
  slidingLeft = false;
}
else{
  acceleration = groundacc;
}
//Trykker man på både højre og venstre, eller ingen af dem, skal spilleren bremse indtil han står stille
if (!keyboard_check(ord(Right)) and !keyboard_check(ord(Left))) or (keyboard_check(ord(Right)) and keyboard_check(ord(Left))){
  if airborne = false{
  if hspeed &gt; acceleration{
    hspeed-=acceleration;
    }
  if hspeed &lt; -acceleration{
    hspeed+=acceleration;
    }
  if hspeed &gt;= -acceleration and hspeed &lt;= acceleration{
    hspeed = 0;
  }
  }
}
//Er der jord under spilleren, får han tyngdekraft.
if place_free(x,y+vspeed){
gravity = 0.2;
}
else{
gravity = 0;
}

//Jumping. Trykkes der på hop-knappen, skal spilleren have en vertikal fart, såfrem spilleren har et hop.
if keyboard_check_pressed(ord(Up)) and jumps &gt; 0 &amp;&amp; canJump = true {
vspeed = -8;
jumps -=1;
}
if airborne = true and keyboard_check_pressed(ord(Up))
and jumps &gt; 0{
vspeed = -8;
jumps -=1
}
if snared = true
{
    if instance_exists(captor)
    {
        canMove = false;
        canJump = false;
        hspeed = 0;
        vspeed = 0;
        canCast = false;
    }
    else
    {
        snared = false;
        canCast = true;
    }
}

if stunned = true &amp;&amp; instance_exists(captor)
    {
    canMove = false;
    canJump = false;
    hspeed = 0;
    vspeed = 0;
    canCast = false
    canHit = false;
    }
    else
    {
    stunned = false;
    }

if hitpower &gt; hitpower_lim
{
    hitpower = hitpower_lim;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>arrow</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = id;

if isCharging = false
{
    if keyboard_check(ord(Right))
    {
        hit_dir = "right";
    }
    if keyboard_check(ord(Left))
    {
        hit_dir = "left";
    }
    if keyboard_check(ord(Up))
    {
        if hspeed&gt;0
        {
            hit_dir = "right";
        }
        if hspeed&lt;=0
        {
            hit_dir = "left";
        }
    }
}



if(keyboard_check(ord(A1)) &amp;&amp; canShoot = true)//Lowers player movement when arrow is being charged
{
    vspeed = 0.2;
    gravity = 0;
    charge += 0.1;
    if(isCharging == false)
    {
        if hit_dir = "right"
        {
            aimVertical = 0
        }
        if hit_dir = "left"
        {
            aimVertical = 180
        }
        with instance_create(x, y, aimLine_obj)
        {
        audio_play_sound(bow_pull_sound,0,0);
        }
    }
    
    isCharging = true;
    
    if(keyboard_check_released(A1))
    {
        gravity = 1;
    }
}

//HØJRE SKYDNING
if isCharging = true &amp;&amp; hit_dir = "right"
{
    if keyboard_check(ord(Up))
    {
        aimVertical +=1;
    }
    if keyboard_check(ord(Down))
    {
        aimVertical -=1;
    }
    if keyboard_check_pressed(ord(Left))
    {
        hit_dir = "left";
        aimVertical = 180;
    }
    if keyboard_check(ord(Right))
    {
        hspeed = 1;
    }
}
//VENSTRE SKYDNING
if isCharging = true &amp;&amp; hit_dir = "left"
{
    if keyboard_check(ord(Up))
    {
        aimVertical -=1;
    }
    if keyboard_check(ord(Down))
    {
        aimVertical +=1;
    }
    if keyboard_check_pressed(ord(Right))
    {
        hit_dir = "right";
        aimVertical = 0;
    }
    if keyboard_check(ord(Left))
    {
        hspeed = -1;
    }
}

//RELEASE
if(keyboard_check_released(ord(A1)) &amp;&amp; canShoot)
{
    with instance_create(x, y, arrow_obj) //Create new instance of arrow with specified direction and bouncynes
    {
        direction = ranger.aimVertical;
        isBouncy = false;
        owner = ID;
        alarm[1] = ranger.lastCharge*5
    }
    
    audio_play_sound(bow_shoot_sound,0,0);
    aimVertical = 0; 
    lastCharge = charge;
    charge = 3;
    isCharging = false;
    canShoot = false;
    alarm[1] = 60;

}

if(charge &gt; 10)//Makes charge rate stay at the upper limit
{
    charge = 10;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ded</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if hp &lt; 0
{
    if player1_obj.chosenCharacter = "ranger"
    {
        global.player2score += 1;
    }
    if player2_obj.chosenCharacter = "ranger"
    {
        global.player1score += 1;
    }
    repeat(100)
    {
        instance_create(x,y,blood_ded_obj);
    }
x = 5000;
hp = 100;
with controller_obj
{
    alarm[0] = 120;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Trap ability</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Special ability bindes til keypad 6
//Trap
var ID;
ID = id;

if keyboard_check_pressed(ord(A3)) &amp;&amp; canTrap = true &amp;&amp; traps &gt; 0 &amp;&amp; instance_number(trap_obj)&lt;3
{
        if hit_dir = "right"
        {
            with instance_create(x,y,trap_obj)
            {
            direction = 0
            owner = ID
            }
        }
        if hit_dir = "left"
        {
            with instance_create(x,y,trap_obj)
            {
                direction = 180
                owner = ID
            }
        }
    
//Remove 1 trap
traps -= 1
//Trap cooldown
alarm[2] = 60;
//Add 1 trap after given time
audio_play_sound(ranger_laugh_sound,0,0);
if traps &lt; maxTraps
{
    alarm[0] = 180;
}

}






</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>JumpShot ability</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Jumpshot ability
var ID;
ID = id;
if keyboard_check_pressed(ord(A2)) &amp;&amp; canjumpShot = true
{
    if hit_dir = "right"
        {
            vspeed = -6;
            hspeed = -5;
            alarm[4] = 15;
        }
        if hit_dir = "left"
        {
            vspeed = -6;
            hspeed = 5;
            alarm[5] = 15;
        }
    alarm[3] = 400;
    canMove = false;
    canjumpShot = false;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sprite change</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Bow
if hit_dir = "left"  &amp;&amp; isCharging = false
    {
    bow_obj.sprite_index = ranger_bow_spr
    bow_obj.image_xscale = -1
    }
if hit_dir = "right" &amp;&amp; isCharging = false
    {
    bow_obj.sprite_index = ranger_bow_spr
    bow_obj.image_xscale = +1
    }
//Bow charging
if isCharging = true &amp;&amp; hit_dir = "left"
    {
    bow_obj.sprite_index = ranger_pull_bow
    bow_obj.image_speed = 0.04
    bow_obj.image_angle = -180
    }
if isCharging = true &amp;&amp; hit_dir = "right"
    {
    bow_obj.sprite_index = ranger_pull_bow
    bow_obj.image_speed = 0.04
    bow_obj.image_xscale = +1
    }
//Bow fully charged
if isCharging = true &amp;&amp; hit_dir = "left" &amp;&amp; charge = 10
    {
    bow_obj.sprite_index = ranger_pulled_bow
    //bow_obj.image_angle = aimLine_obj.image_angle
    }
if isCharging = true &amp;&amp; hit_dir = "right" &amp;&amp; charge = 10
    {
    bow_obj.sprite_index = ranger_pulled_bow
    //bow_obj.image_angle = aimLine_obj.image_angle
    }
//Ranger
//Standing
if (hspeed = 0 and airborne = false)
{
    sprite_index = ranger_stand_spr;
}
//Running
if (hspeed != 0 and airborne = false)
{
    image_speed = 0.3
    sprite_index = ranger_run_spr;
    if isCharging = true
        {
        image_speed = 0.1
        }
}
if (vspeed &lt; 0 and airborne = true)
{
    sprite_index = ranger_jump_spr;
}
if (vspeed &gt; 0 and airborne = true)
{
    sprite_index = ranger_falling_spr
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ultimate</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var ID;
ID = id;

if(keyboard_check(ord(A4)) &amp;&amp; canUltimate = true)//Lowers player movement when arrow is being charged
{
    vspeed = 0.2;
    gravity = 0;
    charge = 10
    if(isCharging == false)
    {
        if hit_dir = "right"
        {
            aimVertical = 0
        }
        if hit_dir = "left"
        {
            aimVertical = 180
        }
        with instance_create(x, y, aimLine_obj)
        {
        audio_play_sound(bow_pull_sound,0,0);
        }
    }
    
    isCharging = true;
    
    if(keyboard_check_released(A4))
    {
        gravity = 1;
    }
}

//HØJRE SKYDNING
if isCharging = true &amp;&amp; hit_dir = "right"
{
    if keyboard_check(ord(Up))
    {
        aimVertical +=1;
    }
    if keyboard_check(ord(Down))
    {
        aimVertical -=1;
    }
    if keyboard_check_pressed(ord(Left))
    {
        hit_dir = "left";
        aimVertical = 180;
    }
    if keyboard_check(ord(Right))
    {
        hspeed = 1;
    }
}
//VENSTRE SKYDNING
if isCharging = true &amp;&amp; hit_dir = "left"
{
    if keyboard_check(ord(Up))
    {
        aimVertical -=1;
    }
    if keyboard_check(ord(Down))
    {
        aimVertical +=1;
    }
    if keyboard_check_pressed(ord(Right))
    {
        hit_dir = "right";
        aimVertical = 0;
    }
    if keyboard_check(ord(Left))
    {
        hspeed = -1;
    }
}

//RELEASE
if(keyboard_check_released(ord(A4)) &amp;&amp; canUltimate = true)
{
    with instance_create(x, y, ranger_ultimate_arrow_obj) //Create new instance of arrow with specified direction and bouncynes
    {
        direction = ranger.aimVertical;
        isBouncy = false;
        owner = ID;
        alarm[1] = ranger.lastCharge*5
    }
    
    audio_play_sound(magic_arrow_sound,0,0);
    aimVertical = 0; 
    lastCharge = charge;
    charge = 3;
    isCharging = false;
    canShoot = false;
    alarm[1] = 60;
    canUltimate = false;
    alarm [6] = 7200

}

if(charge &gt; 10)//Makes charge rate stay at the upper limit
{
    charge = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
